"""
Interfaz de l√≠nea de comandos para el scraper de Mercado Libre Uruguay.
"""

import asyncio
import sys
from pathlib import Path
from typing import Optional

import click
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel
from rich.text import Text

from .main import MercadoLibreScraper, quick_scrape
from .models.models import ScrapingConfig
from .utils.utils import generate_filename


console = Console()


@click.group()
@click.version_option(version="0.1.0", prog_name="mercadolibre-scraper")
def cli():
    """
    üöÄ Scraper de Mercado Libre Uruguay
    
    Extrae informaci√≥n de productos de las ofertas de Mercado Libre Uruguay
    usando Playwright con configuraci√≥n anti-detecci√≥n.
    """
    pass


@cli.command()
@click.option("--url", "-u", 
              default="https://www.mercadolibre.com.uy/ofertas",
              help="URL de la p√°gina de ofertas")
@click.option("--max-products", "-m", 
              type=int, default=100,
              help="N√∫mero m√°ximo de productos a extraer")
@click.option("--output-format", "-f", 
              type=click.Choice(["csv", "json", "excel"]), 
              default="csv",
              help="Formato de salida")
@click.option("--output-path", "-o", 
              help="Ruta personalizada del archivo de salida")
@click.option("--headless", 
              is_flag=True, 
              help="Ejecutar en modo headless (sin interfaz gr√°fica)")
@click.option("--delay", "-d", 
              type=float, default=2.0,
              help="Delay entre requests en segundos")
@click.option("--timeout", "-t", 
              type=int, default=30000,
              help="Timeout del navegador en milisegundos")
def scrape(url: str, max_products: int, output_format: str, output_path: Optional[str], 
           headless: bool, delay: float, timeout: int):
    """
    üéØ Extraer ofertas de Mercado Libre Uruguay.
    
    Ejemplos:
        mercadolibre-scraper scrape
        mercadolibre-scraper scrape --max-products 50 --output-format json
        mercadolibre-scraper scrape --url "https://www.mercadolibre.com.uy/ofertas" --headless
    """
    console.print(Panel.fit(
        f"[bold blue]üöÄ Iniciando Scraping[/bold blue]\n"
        f"URL: [cyan]{url}[/cyan]\n"
        f"Productos objetivo: [green]{max_products}[/green]\n"
        f"Formato: [yellow]{output_format.upper()}[/yellow]\n"
        f"Modo: [red]{'Headless' if headless else 'Con interfaz'}[/red]",
        title="Configuraci√≥n del Scraping"
    ))
    
    # Configurar scraper
    config = ScrapingConfig(
        headless=headless,
        timeout=timeout,
        max_products=max_products,
        delay_between_requests=delay,
        output_format=output_format
    )
    
    # Generar ruta de salida si no se especifica
    if not output_path:
        filename = generate_filename("ofertas", output_format)
        output_path = Path("output") / filename
    
    # Ejecutar scraping
    asyncio.run(_run_scraping(config, url, output_path))


async def _run_scraping(config: ScrapingConfig, url: str, output_path: Path):
    """Ejecutar el scraping con barra de progreso."""
    scraper = MercadoLibreScraper(config)
    
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("Extrayendo productos...", total=None)
            
            # Ejecutar scraping
            result = await scraper.scrape_ofertas(url, config.max_products)
            
            progress.update(task, description="Exportando datos...")
            
            # Exportar productos
            export_path = await scraper.scrape_and_export(
                url=url,
                max_products=config.max_products,
                output_format=config.output_format,
                output_path=str(output_path)
            )
            
            progress.update(task, description="Completado!", completed=True)
        
        # Mostrar resultados
        _display_results(result, export_path)
        
    except Exception as e:
        console.print(f"\n[bold red]‚ùå Error en el scraping:[/bold red] {e}")
        sys.exit(1)
    
    finally:
        await scraper.close()


def _display_results(result, export_path: str):
    """Mostrar resultados del scraping."""
    console.print("\n" + "="*60)
    
    # Estad√≠sticas generales
    stats_table = Table(title="üìä Estad√≠sticas del Scraping")
    stats_table.add_column("M√©trica", style="cyan")
    stats_table.add_column("Valor", style="green")
    
    stats_table.add_row("Total de productos", str(result.total_products))
    stats_table.add_row("Extracciones exitosas", str(result.successful_scrapes))
    stats_table.add_row("Errores", str(result.failed_scrapes))
    stats_table.add_row("Tasa de √©xito", f"{result.success_rate:.1f}%")
    stats_table.add_row("Duraci√≥n", f"{result.duration:.1f} segundos")
    
    console.print(stats_table)
    
    # Informaci√≥n del archivo
    console.print(f"\n[bold green]‚úÖ Scraping completado exitosamente![/bold green]")
    console.print(f"üìÅ Archivo generado: [cyan]{export_path}[/cyan]")
    
    # Mostrar algunos productos como ejemplo
    if result.products:
        console.print("\n[bold yellow]üìã Muestra de productos extra√≠dos:[/bold yellow]")
        
        sample_table = Table(show_header=True, header_style="bold magenta")
        sample_table.add_column("T√≠tulo", style="cyan", max_width=40)
        sample_table.add_column("Precio", style="green")
        sample_table.add_column("Vendedor", style="yellow")
        sample_table.add_column("Rating", style="blue")
        
        for product in result.products[:5]:  # Mostrar solo 5 productos
            title = product.title[:37] + "..." if len(product.title) > 40 else product.title
            price = f"${product.current_price:,.0f}"
            rating = f"{product.rating:.1f}" if product.rating else "N/A"
            
            sample_table.add_row(title, price, product.seller, rating)
        
        console.print(sample_table)


@cli.command()
@click.option("--url", "-u", required=True,
              help="URL del producto a extraer")
@click.option("--output-format", "-f", 
              type=click.Choice(["csv", "json", "excel"]), 
              default="json",
              help="Formato de salida")
@click.option("--output-path", "-o", 
              help="Ruta personalizada del archivo de salida")
@click.option("--headless", 
              is_flag=True, 
              help="Ejecutar en modo headless")
def product(url: str, output_format: str, output_path: Optional[str], headless: bool):
    """
    üîç Extraer detalles completos de un producto espec√≠fico.
    
    Ejemplos:
        mercadolibre-scraper product --url "https://www.mercadolibre.com.uy/..."
        mercadolibre-scraper product --url "..." --output-format json
    """
    console.print(Panel.fit(
        f"[bold blue]üîç Extrayendo Producto[/bold blue]\n"
        f"URL: [cyan]{url}[/cyan]\n"
        f"Formato: [yellow]{output_format.upper()}[/yellow]",
        title="Extracci√≥n de Producto Individual"
    ))
    
    # Generar ruta de salida si no se especifica
    if not output_path:
        filename = generate_filename("producto", output_format)
        output_path = Path("output") / filename
    
    # Ejecutar extracci√≥n
    asyncio.run(_run_product_extraction(url, output_format, output_path, headless))


async def _run_product_extraction(url: str, output_format: str, output_path: Path, headless: bool):
    """Ejecutar extracci√≥n de producto individual."""
    config = ScrapingConfig(
        headless=headless,
        max_products=1,
        output_format=output_format
    )
    
    scraper = MercadoLibreScraper(config)
    
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("Extrayendo producto...", total=None)
            
            # Extraer producto
            products = await scraper.scrape_product_details([url])
            
            if not products:
                raise Exception("No se pudo extraer el producto")
            
            progress.update(task, description="Exportando datos...")
            
            # Exportar producto
            export_path = scraper.utils.export_products(
                [products[0].to_dict()],
                str(output_path),
                output_format
            )
            
            progress.update(task, description="Completado!", completed=True)
        
        # Mostrar resultados
        product = products[0]
        console.print(f"\n[bold green]‚úÖ Producto extra√≠do exitosamente![/bold green]")
        console.print(f"üìÅ Archivo generado: [cyan]{export_path}[/cyan]")
        
        # Mostrar detalles del producto
        details_table = Table(title="üìã Detalles del Producto")
        details_table.add_column("Campo", style="cyan")
        details_table.add_column("Valor", style="green")
        
        details_table.add_row("T√≠tulo", product.title)
        details_table.add_row("Precio", f"${product.current_price:,.0f}")
        details_table.add_row("Vendedor", product.seller)
        details_table.add_row("Rating", f"{product.rating:.1f}" if product.rating else "N/A")
        details_table.add_row("Reviews", str(product.review_count) if product.review_count else "N/A")
        details_table.add_row("Env√≠o gratis", "S√≠" if product.free_shipping else "No")
        
        if product.brand:
            details_table.add_row("Marca", product.brand)
        if product.condition:
            details_table.add_row("Condici√≥n", product.condition)
        if product.seller_location:
            details_table.add_row("Ubicaci√≥n", product.seller_location)
        
        console.print(details_table)
        
    except Exception as e:
        console.print(f"\n[bold red]‚ùå Error al extraer producto:[/bold red] {e}")
        sys.exit(1)
    
    finally:
        await scraper.close()


@cli.command()
@click.option("--url", "-u", 
              default="https://www.mercadolibre.com.uy/ofertas",
              help="URL de la p√°gina de ofertas")
@click.option("--max-products", "-m", 
              type=int, default=20,
              help="N√∫mero m√°ximo de productos a extraer")
@click.option("--headless", 
              is_flag=True, 
              help="Ejecutar en modo headless")
def preview(url: str, max_products: int, headless: bool):
    """
    üëÄ Vista previa r√°pida de productos sin exportar.
    
    Ejemplos:
        mercadolibre-scraper preview
        mercadolibre-scraper preview --max-products 10
    """
    console.print(Panel.fit(
        f"[bold blue]üëÄ Vista Previa[/bold blue]\n"
        f"URL: [cyan]{url}[/cyan]\n"
        f"Productos: [green]{max_products}[/green]",
        title="Vista Previa R√°pida"
    ))
    
    # Ejecutar vista previa
    asyncio.run(_run_preview(url, max_products, headless))


async def _run_preview(url: str, max_products: int, headless: bool):
    """Ejecutar vista previa de productos."""
    config = ScrapingConfig(
        headless=headless,
        max_products=max_products
    )
    
    scraper = MercadoLibreScraper(config)
    
    try:
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            task = progress.add_task("Extrayendo vista previa...", total=None)
            
            # Extraer productos
            result = await scraper.scrape_ofertas(url, max_products)
            
            progress.update(task, description="Completado!", completed=True)
        
        # Mostrar vista previa
        if result.products:
            console.print(f"\n[bold green]‚úÖ Vista previa completada![/bold green]")
            console.print(f"üìä Productos extra√≠dos: [cyan]{len(result.products)}[/cyan]")
            
            # Tabla de productos
            preview_table = Table(title="üìã Vista Previa de Productos")
            preview_table.add_column("#", style="cyan")
            preview_table.add_column("T√≠tulo", style="green", max_width=50)
            preview_table.add_column("Precio", style="yellow")
            preview_table.add_column("Descuento", style="red")
            preview_table.add_column("Vendedor", style="blue", max_width=20)
            
            for i, product in enumerate(result.products, 1):
                title = product.title[:47] + "..." if len(product.title) > 50 else product.title
                price = f"${product.current_price:,.0f}"
                discount = f"{product.discount_percentage:.0f}%" if product.discount_percentage else "N/A"
                seller = product.seller[:17] + "..." if len(product.seller) > 20 else product.seller
                
                preview_table.add_row(str(i), title, price, discount, seller)
            
            console.print(preview_table)
            
            # Estad√≠sticas r√°pidas
            stats = scraper.get_statistics(result)
            if stats:
                console.print(f"\n[bold yellow]üìà Estad√≠sticas R√°pidas:[/bold yellow]")
                console.print(f"Precio promedio: [green]${stats['avg_price']:,.0f}[/green]")
                console.print(f"Descuento promedio: [red]{stats['avg_discount']:.1f}%[/red]")
                console.print(f"Rating promedio: [blue]{stats['avg_rating']:.1f}[/blue]")
                console.print(f"Env√≠o gratis: [cyan]{stats['free_shipping_percentage']:.1f}%[/cyan]")
        
        else:
            console.print("\n[bold red]‚ùå No se pudieron extraer productos[/bold red]")
        
    except Exception as e:
        console.print(f"\n[bold red]‚ùå Error en la vista previa:[/bold red] {e}")
        sys.exit(1)
    
    finally:
        await scraper.close()


@cli.command()
def config():
    """
    ‚öôÔ∏è Mostrar configuraci√≥n actual del scraper.
    """
    console.print(Panel.fit(
        "[bold blue]‚öôÔ∏è Configuraci√≥n del Scraper[/bold blue]\n"
        "Para personalizar la configuraci√≥n, crea un archivo .env\n"
        "o modifica las variables de entorno correspondientes.",
        title="Configuraci√≥n"
    ))
    
    # Mostrar configuraci√≥n por defecto
    config = ScrapingConfig()
    
    config_table = Table(title="üîß Configuraci√≥n por Defecto")
    config_table.add_column("Par√°metro", style="cyan")
    config_table.add_column("Valor", style="green")
    config_table.add_column("Variable de Entorno", style="yellow")
    
    config_table.add_row("URL de ofertas", config.offers_url, "N/A")
    config_table.add_row("Modo headless", str(config.headless), "BROWSER_HEADLESS")
    config_table.add_row("Timeout (ms)", str(config.timeout), "BROWSER_TIMEOUT")
    config_table.add_row("Productos m√°x.", str(config.max_products), "MAX_PRODUCTS")
    config_table.add_row("Delay (seg)", str(config.delay_between_requests), "DELAY_BETWEEN_REQUESTS")
    config_table.add_row("Reintentos", str(config.retry_attempts), "RETRY_ATTEMPTS")
    config_table.add_row("Formato salida", config.output_format, "OUTPUT_FORMAT")
    config_table.add_row("Directorio salida", config.output_dir, "OUTPUT_DIR")
    
    console.print(config_table)
    
    # Mostrar ejemplo de archivo .env
    env_example = """
# Ejemplo de archivo .env
BROWSER_HEADLESS=false
BROWSER_TIMEOUT=30000
MAX_PRODUCTS=100
DELAY_BETWEEN_REQUESTS=2.0
RETRY_ATTEMPTS=3
OUTPUT_FORMAT=csv
OUTPUT_DIR=output
"""
    
    console.print(Panel(env_example, title="üìù Ejemplo de archivo .env"))


@cli.command()
def install():
    """
    üîß Instalar dependencias y navegadores necesarios.
    """
    console.print(Panel.fit(
        "[bold blue]üîß Instalaci√≥n de Dependencias[/bold blue]\n"
        "Este comando instalar√° las dependencias necesarias\n"
        "y los navegadores de Playwright.",
        title="Instalaci√≥n"
    ))
    
    # Ejecutar instalaci√≥n
    asyncio.run(_run_install())


async def _run_install():
    """Ejecutar la instalaci√≥n de dependencias."""
    try:
        # Instalar dependencias con Poetry
        console.print("[yellow]üì¶ Instalando dependencias con Poetry...[/yellow]")
        result = await asyncio.create_subprocess_exec(
            "poetry", "install",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await result.communicate()
        
        if result.returncode == 0:
            console.print("[green]‚úÖ Dependencias instaladas correctamente[/green]")
        else:
            console.print("[red]‚ùå Error al instalar dependencias[/red]")
            return
        
        # Instalar navegadores de Playwright
        console.print("[yellow]üåê Instalando navegadores de Playwright...[/yellow]")
        result = await asyncio.create_subprocess_exec(
            "poetry", "run", "playwright", "install",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await result.communicate()
        
        if result.returncode == 0:
            console.print("[green]‚úÖ Navegadores instalados correctamente[/green]")
        else:
            console.print("[red]‚ùå Error al instalar navegadores[/red]")
            return
        
        console.print("\n[bold green]üéâ Instalaci√≥n completada exitosamente![/bold green]")
        console.print("Ahora puedes usar el scraper con: [cyan]mercadolibre-scraper scrape[/cyan]")
        
    except Exception as e:
        console.print(f"\n[bold red]‚ùå Error durante la instalaci√≥n:[/bold red] {e}")
        sys.exit(1)


def main():
    """Funci√≥n principal del CLI."""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n[bold yellow]‚ö†Ô∏è Operaci√≥n cancelada por el usuario[/bold yellow]")
        sys.exit(0)
    except Exception as e:
        console.print(f"\n[bold red]‚ùå Error inesperado:[/bold red] {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
